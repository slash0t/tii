"""
=============================================================================
–õ–ê–ë–û–†–ê–¢–û–†–ù–ê–Ø –†–ê–ë–û–¢–ê: –õ–ò–ù–ï–ô–ù–´–ô –†–ï–ì–†–ï–°–°–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ò –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–ï
=============================================================================

–¢–µ–º–∞: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –ø–æ Chicago Metropolitan Area
      Hotel Statistics (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è x4)

–¶–µ–ª—å: –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 8 –º–µ—Å—è—Ü–µ–≤ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö

–ê–≤—Ç–æ—Ä: [–í–∞—à–µ –∏–º—è]
–î–∞—Ç–∞: 2025
=============================================================================
"""

import warnings

warnings.filterwarnings("ignore")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose
import matplotlib.dates as mdates
from scipy import stats

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.style.use('seaborn-v0_8-darkgrid')
plt.rcParams['figure.figsize'] = (14, 6)
plt.rcParams['font.size'] = 10

print("=" * 80)
print("–õ–ò–ù–ï–ô–ù–´–ô –†–ï–ì–†–ï–°–°–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó: –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–ï –í–†–ï–ú–ï–ù–ù–´–• –†–Ø–î–û–í")
print("=" * 80)
print("\n–¶–µ–ª—å: –ü—Ä–æ–≥–Ω–æ–∑ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –æ—Ç–µ–ª–µ–π Chicago Metropolitan Area –Ω–∞ 8 –º–µ—Å—è—Ü–µ–≤")
print("-" * 80)

"""
=============================================================================
–¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ê–Ø –ß–ê–°–¢–¨
=============================================================================

1. –í–†–ï–ú–ï–ù–ù–û–ô –†–Ø–î (Time Series)
   –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–π, —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–∏.
   –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
   - –¢—Ä–µ–Ω–¥ (Trend): –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
   - –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (Seasonality): —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
   - –¶–∏–∫–ª—ã (Cycles): –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
   - –°–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (Residual): –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏

2. –ê–î–î–ò–¢–ò–í–ù–ê–Ø –ú–û–î–ï–õ–¨
   Y(t) = T(t) + S(t) + R(t)
   –≥–¥–µ T - —Ç—Ä–µ–Ω–¥, S - —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å, R - –æ—Å—Ç–∞—Ç–∫–∏
   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∞–º–ø–ª–∏—Ç—É–¥–∞ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π –ø–æ—Å—Ç–æ—è–Ω–Ω–∞

3. –ú–£–õ–¨–¢–ò–ü–õ–ò–ö–ê–¢–ò–í–ù–ê–Ø –ú–û–î–ï–õ–¨
   Y(t) = T(t) * S(t) * R(t)
   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∞–º–ø–ª–∏—Ç—É–¥–∞ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π —Ä–∞—Å—Ç–µ—Ç —Å —Ç—Ä–µ–Ω–¥–æ–º

4. –õ–ò–ù–ï–ô–ù–ê–Ø –†–ï–ì–†–ï–°–°–ò–Ø –î–õ–Ø –¢–†–ï–ù–î–ê
   y = a*x + b (–ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è: y = a_n*x^n + ... + a_1*x + a_0)
   –ú–µ—Ç–æ–¥ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç —Å—É–º–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π

5. –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–ï
   –≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è = –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π –≤ –±—É–¥—É—â–µ–µ
   –¢–æ—á–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç—Å—è —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
=============================================================================
"""

# =============================================================================
# –®–ê–ì 1: –ó–ê–ì–†–£–ó–ö–ê –ò –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•
# =============================================================================
print("\n" + "=" * 80)
print("–®–ê–ì 1: –ó–ê–ì–†–£–ó–ö–ê –ò –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•")
print("=" * 80)

FILENAME = "Chicago_hotels.csv"  # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
FORECAST_MONTHS = 8
SEASONAL_PERIOD = 12  # –ì–æ–¥–æ–≤–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (12 –º–µ—Å—è—Ü–µ–≤)

print(f"\n–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞: {FILENAME}")
print(f"–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: x4 (Average Daily Rate, Chicago Metropolitan Area)")
print(f"–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞: {FORECAST_MONTHS} –º–µ—Å—è—Ü–µ–≤")

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv(FILENAME, sep=';', decimal=',', dtype=str)

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤
df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
df['month_year'] = df['date1'].astype(str) + '-' + df['date2'].astype(str)
df['date'] = pd.to_datetime(df['month_year'], format='%B-%Y', errors='coerce')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã
bad_dates = df[df['date'].isna()]
if len(bad_dates) > 0:
    print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(bad_dates)} —Å—Ç—Ä–æ–∫ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)")
    df = df.dropna(subset=['date'])

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ x4 –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
df['x4'] = df['x4'].str.replace(',', '.').astype(float)

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –∏ x4
df = df[['date', 'x4']].copy()
df = df.sort_values('date').set_index('date')

# –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ
df = df[~df.index.duplicated(keep='first')]

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ x4
df = df.dropna(subset=['x4'])

print(f"\n‚úì –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
print(f"  –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {df.index.min().strftime('%B %Y')} - {df.index.max().strftime('%B %Y')}")
print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {len(df)}")
print(f"  –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: ${df['x4'].min():.2f} - ${df['x4'].max():.2f}")

series = df['x4']

# =============================================================================
# –®–ê–ì 2: –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –ò–°–•–û–î–ù–û–ì–û –í–†–ï–ú–ï–ù–ù–û–ì–û –†–Ø–î–ê
# =============================================================================
print("\n" + "=" * 80)
print("–®–ê–ì 2: –ü–û–°–¢–†–û–ï–ù–ò–ï –ì–†–ê–§–ò–ö–ê –ò–°–•–û–î–ù–û–ì–û –í–†–ï–ú–ï–ù–ù–û–ì–û –†–Ø–î–ê")
print("=" * 80)

plt.figure(figsize=(14, 6))
plt.plot(series.index, series.values, marker='o', markersize=4,
         linewidth=1.5, color='steelblue', label='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
plt.title('–ò—Å—Ö–æ–¥–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥: Average Daily Rate ($)\nChicago Metropolitan Area Hotel Statistics',
          fontsize=14, fontweight='bold')
plt.xlabel('–î–∞—Ç–∞', fontsize=12)
plt.ylabel('–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ ($)', fontsize=12)
plt.grid(True, alpha=0.3)
plt.legend(fontsize=11)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ X
ax = plt.gca()
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
ax.xaxis.set_major_locator(mdates.YearLocator())
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

print("\nüìä –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä—è–¥–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω")

# =============================================================================
# –®–ê–ì 3: –ê–ù–ê–õ–ò–ó –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö –í–†–ï–ú–ï–ù–ù–û–ì–û –†–Ø–î–ê
# =============================================================================
print("\n" + "=" * 80)
print("–®–ê–ì 3: –û–¢–í–ï–¢–´ –ù–ê –í–û–ü–†–û–°–´ –û –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ê–• –†–Ø–î–ê")
print("=" * 80)

# –í–æ–ø—Ä–æ—Å 1: –ï—Å—Ç—å –ª–∏ —É —Ä—è–¥–∞ —Ç—Ä–µ–Ω–¥?
print("\n1Ô∏è‚É£  –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–ê")
print("-" * 40)

# –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–Ω–¥–∞
x = np.arange(len(series))
y = series.values
slope, intercept, r_value, p_value, std_err = stats.linregress(x, y)

print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–∫–ª–æ–Ω–∞: {slope:.4f}")
print(f"   R¬≤ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏): {r_value ** 2:.4f}")
print(f"   p-value: {p_value:.6f}")

if p_value < 0.05 and abs(r_value) > 0.3:
    trend_direction = "–≤–æ—Å—Ö–æ–¥—è—â–∏–π" if slope > 0 else "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π"
    print(f"\n   ‚úì –î–∞, —É —Ä—è–¥–∞ –µ—Å—Ç—å –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò –ó–ù–ê–ß–ò–ú–´–ô {trend_direction} —Ç—Ä–µ–Ω–¥")
    print(f"     –°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç: ${slope:.4f} –∑–∞ –º–µ—Å—è—Ü")
else:
    print("\n   ‚úì –Ø–≤–Ω–æ–≥–æ –ª–∏–Ω–µ–π–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

# –í–æ–ø—Ä–æ—Å 2: –ï—Å—Ç—å –ª–∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å?
print("\n2Ô∏è‚É£  –ê–ù–ê–õ–ò–ó –°–ï–ó–û–ù–ù–û–°–¢–ò")
print("-" * 40)

# –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
decomp = seasonal_decompose(series, model='additive', period=SEASONAL_PERIOD,
                            extrapolate_trend='freq')

seasonal_strength = 1 - (decomp.resid.var() / (decomp.seasonal + decomp.resid).var())
print(f"   –°–∏–ª–∞ —Å–µ–∑–æ–Ω–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {seasonal_strength:.4f}")

if seasonal_strength > 0.3:
    print(f"\n   ‚úì –î–∞, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –í–´–†–ê–ñ–ï–ù–ù–ê–Ø —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–∏–æ–¥–æ–º {SEASONAL_PERIOD} –º–µ—Å—è—Ü–µ–≤")
    print(f"     –≠—Ç–æ –≥–æ–¥–æ–≤–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (12 –º–µ—Å—è—Ü–µ–≤)")

    # –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    seasonal_pattern = decomp.seasonal[:SEASONAL_PERIOD]
    max_month = seasonal_pattern.idxmax().month
    min_month = seasonal_pattern.idxmin().month
    month_names = ['', '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                   '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
    print(f"     –ü–∏–∫ —Ü–µ–Ω: {month_names[max_month]} (+${seasonal_pattern.max():.2f})")
    print(f"     –ú–∏–Ω–∏–º—É–º —Ü–µ–Ω: {month_names[min_month]} (${seasonal_pattern.min():.2f})")
else:
    print("\n   ‚úì –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å —Å–ª–∞–±–∞—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

# –í–æ–ø—Ä–æ—Å 3: –ú–µ–Ω—è–µ—Ç –ª–∏ —Ä—è–¥ —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä?
print("\n3Ô∏è‚É£  –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø –•–ê–†–ê–ö–¢–ï–†–ê –†–Ø–î–ê")
print("-" * 40)

# –†–∞–∑–±–∏–≤–∞–µ–º —Ä—è–¥ –Ω–∞ —á–∞—Å—Ç–∏ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
mid_point = len(series) // 2
first_half = series[:mid_point]
second_half = series[mid_point:]

mean_diff = abs(second_half.mean() - first_half.mean())
std_diff = abs(second_half.std() - first_half.std())

print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (1-—è –ø–æ–ª–æ–≤–∏–Ω–∞): ${first_half.mean():.2f}")
print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (2-—è –ø–æ–ª–æ–≤–∏–Ω–∞): ${second_half.mean():.2f}")
print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ: ${mean_diff:.2f}")
print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: ${std_diff:.2f}")

if mean_diff > first_half.std() * 0.5:
    print(f"\n   ‚úì –î–∞, —Ä—è–¥ –ú–ï–ù–Ø–ï–¢ —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Å–¥–≤–∏–≥ —É—Ä–æ–≤–Ω—è")
else:
    print(f"\n   ‚úì –•–∞—Ä–∞–∫—Ç–µ—Ä —Ä—è–¥–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª–µ–Ω")

# –í–æ–ø—Ä–æ—Å 4: –ï—Å—Ç—å –ª–∏ –≤—ã–±—Ä–æ—Å—ã?
print("\n4Ô∏è‚É£  –ê–ù–ê–õ–ò–ó –í–´–ë–†–û–°–û–í")
print("-" * 40)

# –ú–µ—Ç–æ–¥ –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–∞—Ö–∞ (IQR)
q1, q3 = series.quantile([0.25, 0.75])
iqr = q3 - q1
lower_bound = q1 - 1.5 * iqr
upper_bound = q3 + 1.5 * iqr
outliers = series[(series < lower_bound) | (series > upper_bound)]

print(f"   –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (Q1 - 1.5*IQR): ${lower_bound:.2f}")
print(f"   –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (Q3 + 1.5*IQR): ${upper_bound:.2f}")
print(f"   –ù–∞–π–¥–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤: {len(outliers)}")

if len(outliers) > 0:
    print(f"\n   ‚úì –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤—ã–±—Ä–æ—Å—ã:")
    for date, value in outliers.items():
        print(f"     - {date.strftime('%B %Y')}: ${value:.2f}")
else:
    print(f"\n   ‚úì –í—ã–±—Ä–æ—Å–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

# =============================================================================
# –®–ê–ì 4: –î–ï–ö–û–ú–ü–û–ó–ò–¶–ò–Ø –í–†–ï–ú–ï–ù–ù–û–ì–û –†–Ø–î–ê
# =============================================================================
print("\n" + "=" * 80)
print("–®–ê–ì 4: –î–ï–ö–û–ú–ü–û–ó–ò–¶–ò–Ø –í–†–ï–ú–ï–ù–ù–û–ì–û –†–Ø–î–ê")
print("=" * 80)
print("\n–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Ä—è–¥ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: –¢—Ä–µ–Ω–¥ + –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å + –û—Å—Ç–∞—Ç–∫–∏")

fig = decomp.plot()
fig.set_size_inches(14, 10)

# –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
for i, ax in enumerate(fig.axes):
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
    ax.xaxis.set_major_locator(mdates.YearLocator())
    plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha="right")
    ax.grid(True, alpha=0.3)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è
    titles = [
        '–ò—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥ (Observed)',
        '–¢—Ä–µ–Ω–¥ (Trend) - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è',
        '–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (Seasonal) - –≥–æ–¥–æ–≤–æ–π —Ü–∏–∫–ª',
        '–û—Å—Ç–∞—Ç–∫–∏ (Residual) - —Å–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞'
    ]
    if i < len(titles):
        ax.set_title(titles[i], fontsize=11, fontweight='bold')

plt.suptitle("–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ (–ê–¥–¥–∏—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å)",
             fontsize=14, fontweight='bold', y=0.995)
plt.tight_layout()
plt.show()

print("\nüìä –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

# =============================================================================
# –®–ê–ì 5: –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –í–´–ë–†–û–°–û–í
# =============================================================================
print("\n" + "=" * 80)
print("–®–ê–ì 5: –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –í–´–ë–†–û–°–û–í")
print("=" * 80)

plt.figure(figsize=(14, 6))
plt.plot(series.index, series.values, marker='o', markersize=4,
         linewidth=1.5, color='steelblue', label='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')

if len(outliers) > 0:
    plt.scatter(outliers.index, outliers.values, color='red', s=100,
                zorder=5, label=f'–í—ã–±—Ä–æ—Å—ã (n={len(outliers)})', marker='X')

plt.axhline(y=upper_bound, color='orange', linestyle='--',
            linewidth=1, label=f'–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (${upper_bound:.2f})')
plt.axhline(y=lower_bound, color='orange', linestyle='--',
            linewidth=1, label=f'–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (${lower_bound:.2f})')

plt.title('–ò—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –≤—ã–±—Ä–æ—Å–∞–º–∏ (–º–µ—Ç–æ–¥ IQR)',
          fontsize=14, fontweight='bold')
plt.xlabel('–î–∞—Ç–∞', fontsize=12)
plt.ylabel('–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ ($)', fontsize=12)
plt.grid(True, alpha=0.3)
plt.legend(fontsize=10)

ax = plt.gca()
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
ax.xaxis.set_major_locator(mdates.YearLocator())
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

print("\nüìä –ì—Ä–∞—Ñ–∏–∫ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω")

# =============================================================================
# –®–ê–ì 6: –ü–û–°–¢–†–û–ï–ù–ò–ï –õ–ò–ù–ï–ô–ù–û–ô –†–ï–ì–†–ï–°–°–ò–û–ù–ù–û–ô –ú–û–î–ï–õ–ò
# =============================================================================
print("\n" + "=" * 80)
print("–®–ê–ì 6: –ü–û–°–¢–†–û–ï–ù–ò–ï –õ–ò–ù–ï–ô–ù–û–ô –†–ï–ì–†–ï–°–°–ò–û–ù–ù–û–ô –ú–û–î–ï–õ–ò")
print("=" * 80)

print("\n–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞")
print("–ü–æ—Ä—è–¥–æ–∫ –ø–æ–ª–∏–Ω–æ–º–∞: 3 (–±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –ø—Ä–æ—Å—Ç–æ—Ç–æ–π –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é)")

# –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–µ–Ω–¥ –∏–∑ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
trend = decomp.trend.dropna()
x_trend = np.arange(len(trend))
y_trend = trend.values

# –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è 3-–π —Å—Ç–µ–ø–µ–Ω–∏
poly_degree = 3
coeffs = np.polyfit(x_trend, y_trend, poly_degree)
trend_func = np.poly1d(coeffs)

print(f"\n–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ–ª–∏–Ω–æ–º–∞ (—Å—Ç–µ–ø–µ–Ω—å {poly_degree}):")
for i, coef in enumerate(coeffs):
    print(f"  a_{poly_degree - i} = {coef:.6f}")

# –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
trend_fitted = trend_func(x_trend)
r2 = 1 - np.sum((y_trend - trend_fitted) ** 2) / np.sum((y_trend - np.mean(y_trend)) ** 2)
rmse = np.sqrt(np.mean((y_trend - trend_fitted) ** 2))

print(f"\n–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏:")
print(f"  R¬≤ = {r2:.4f} (–¥–æ–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏)")
print(f"  RMSE = ${rmse:.2f} (—Å—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞)")

# =============================================================================
# –®–ê–ì 7: –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–ï
# =============================================================================
print("\n" + "=" * 80)
print("–®–ê–ì 7: –í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–†–û–ì–ù–û–ó–ê –ù–ê 8 –ú–ï–°–Ø–¶–ï–í")
print("=" * 80)

print("\n–ú–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è + –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è")
print("–ü—Ä–æ–≥–Ω–æ–∑ = –¢—Ä–µ–Ω–¥ (—ç–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) + –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω)")

# –ü—Ä–æ–≥–Ω–æ–∑ —Ç—Ä–µ–Ω–¥–∞
x_future = np.arange(len(trend), len(trend) + FORECAST_MONTHS)
trend_forecast = trend_func(x_future)

print(f"\n–ü—Ä–æ–≥–Ω–æ–∑ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ {FORECAST_MONTHS} –º–µ—Å—è—Ü–µ–≤:")
for i, val in enumerate(trend_forecast, 1):
    print(f"  –ú–µ—Å—è—Ü +{i}: ${val:.2f}")

# –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
seasonal = decomp.seasonal
season_pattern = seasonal[:SEASONAL_PERIOD].values
season_forecast = [season_pattern[i % SEASONAL_PERIOD] for i in range(FORECAST_MONTHS)]

print(f"\n–°–µ–∑–æ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞:")
for i, val in enumerate(season_forecast, 1):
    print(f"  –ú–µ—Å—è—Ü +{i}: {val:+.2f}")

# –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
forecast = trend_forecast + season_forecast

print(f"\n{'=' * 60}")
print("–ò–¢–û–ì–û–í–´–ô –ü–†–û–ì–ù–û–ó (–¢—Ä–µ–Ω–¥ + –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å):")
print(f"{'=' * 60}")

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
last_date = series.index[-1]
future_dates = pd.date_range(last_date + pd.DateOffset(months=1),
                             periods=FORECAST_MONTHS, freq='MS')
forecast_series = pd.Series(forecast, index=future_dates)

for date, value in forecast_series.items():
    print(f"  {date.strftime('%Y-%m-%d')} ({date.strftime('%B %Y')}): ${value:.2f}")

# =============================================================================
# –®–ê–ì 8: –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò –ü–†–û–ì–ù–û–ó–ê
# =============================================================================
print("\n" + "=" * 80)
print("–®–ê–ì 8: –ü–û–°–¢–†–û–ï–ù–ò–ï –ò–¢–û–ì–û–í–´–• –ì–†–ê–§–ò–ö–û–í")
print("=" * 80)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10))

# –ì—Ä–∞—Ñ–∏–∫ 1: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ + –ü—Ä–æ–≥–Ω–æ–∑
ax1.plot(series.index, series.values, marker='o', markersize=4,
         linewidth=1.5, color='steelblue', label='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (observed)')
ax1.plot(forecast_series.index, forecast_series.values, marker='s',
         markersize=6, linewidth=2, color='green',
         label=f'–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {FORECAST_MONTHS} –º–µ—Å—è—Ü–µ–≤')

# –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–ø—Ä–∏–º–µ—Ä–Ω—ã–π, –Ω–∞ –æ—Å–Ω–æ–≤–µ RMSE)
ci = 1.96 * rmse  # 95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
ax1.fill_between(forecast_series.index,
                 forecast_series.values - ci,
                 forecast_series.values + ci,
                 alpha=0.2, color='green',
                 label='95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª')

ax1.axvline(x=last_date, color='red', linestyle='--',
            linewidth=1.5, label='–ì—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞')
ax1.set_title('–ò—Å—Ö–æ–¥–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 8 –º–µ—Å—è—Ü–µ–≤',
              fontsize=13, fontweight='bold')
ax1.set_xlabel('–î–∞—Ç–∞', fontsize=11)
ax1.set_ylabel('–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ ($)', fontsize=11)
ax1.grid(True, alpha=0.3)
ax1.legend(fontsize=10, loc='best')
ax1.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
ax1.xaxis.set_major_locator(mdates.YearLocator())
plt.setp(ax1.xaxis.get_majorticklabels(), rotation=45, ha="right")

# –ì—Ä–∞—Ñ–∏–∫ 2: –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
trend_full = pd.concat([trend, pd.Series(trend_forecast, index=future_dates)])
seasonal_full = pd.concat([seasonal, pd.Series(season_forecast, index=future_dates)])

ax2.plot(series.index, series.values, linewidth=1.5,
         color='steelblue', label='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', alpha=0.7)
ax2.plot(trend_full.index, trend_full.values, linewidth=2,
         color='red', linestyle='--', label='–¢—Ä–µ–Ω–¥ (—ç–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)')
ax2.plot(forecast_series.index, forecast_series.values,
         linewidth=2.5, color='green', marker='s',
         markersize=6, label='–ü—Ä–æ–≥–Ω–æ–∑ (—Ç—Ä–µ–Ω–¥ + —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å)')
ax2.axvline(x=last_date, color='red', linestyle='--',
            linewidth=1.5, alpha=0.5)

ax2.set_title('–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è: –¢—Ä–µ–Ω–¥ –∏ –ø—Ä–æ–≥–Ω–æ–∑',
              fontsize=13, fontweight='bold')
ax2.set_xlabel('–î–∞—Ç–∞', fontsize=11)
ax2.set_ylabel('–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ ($)', fontsize=11)
ax2.grid(True, alpha=0.3)
ax2.legend(fontsize=10, loc='best')
ax2.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
ax2.xaxis.set_major_locator(mdates.YearLocator())
plt.setp(ax2.xaxis.get_majorticklabels(), rotation=45, ha="right")

plt.tight_layout()
plt.show()

print("\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã")

# =============================================================================
# –®–ê–ì 9: –ù–ê–ë–û–† –°–ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô
# =============================================================================
print("\n" + "=" * 80)
print("–®–ê–ì 9: –ù–ê–ë–û–† –°–ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô")
print("=" * 80)

print("\n–°–ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø Average Daily Rate ($)")
print("Chicago Metropolitan Area Hotel Statistics")
print("-" * 60)

for i, (date, value) in enumerate(forecast_series.items(), 1):
    month_name = date.strftime('%B')
    year = date.strftime('%Y')
    print(f"{i}. {month_name:12} {year}: ${value:7.2f}")

print("-" * 60)
print(f"–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: ${forecast_series.mean():.2f}")
print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞:  ${forecast_series.min():.2f}")
print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: ${forecast_series.max():.2f}")

# =============================================================================
# –í–´–í–û–î–´
# =============================================================================
print("\n" + "=" * 80)
print("–í–´–í–û–î–´")
print("=" * 80)

print(f"""
1. –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –í–†–ï–ú–ï–ù–ù–û–ì–û –†–Ø–î–ê:
   - –¢—Ä–µ–Ω–¥: {"–û–±–Ω–∞—Ä—É–∂–µ–Ω" if p_value < 0.05 else "–ù–µ –≤—ã—Ä–∞–∂–µ–Ω"} 
     ({trend_direction if p_value < 0.05 else "—Å—Ç–∞–±–∏–ª—å–Ω—ã–π"})
   - –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: {"–í—ã—Ä–∞–∂–µ–Ω–Ω–∞—è" if seasonal_strength > 0.3 else "–°–ª–∞–±–∞—è"} 
     (–ø–µ—Ä–∏–æ–¥ {SEASONAL_PERIOD} –º–µ—Å—è—Ü–µ–≤)
   - –í—ã–±—Ä–æ—Å—ã: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(outliers)} –∑–Ω–∞—á–µ–Ω–∏–π
   - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: {"–î–∞" if mean_diff > first_half.std() * 0.5 else "–ù–µ—Ç"}

2. –ú–û–î–ï–õ–¨ –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø:
   - –ú–µ—Ç–æ–¥: –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è + –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è (—Å—Ç–µ–ø–µ–Ω—å {poly_degree})
   - –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏: R¬≤ = {r2:.4f}, RMSE = ${rmse:.2f}
   - –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞: {FORECAST_MONTHS} –º–µ—Å—è—Ü–µ–≤

3. –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–ì–ù–û–ó–ê:
   - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${forecast_series.min():.2f} - ${forecast_series.max():.2f}
   - –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: ${forecast_series.mean():.2f}
   - –¢–µ–Ω–¥–µ–Ω—Ü–∏—è: {"–†–æ—Å—Ç" if trend_forecast[-1] > trend_forecast[0] else "–°–Ω–∏–∂–µ–Ω–∏–µ"} 
     —Å—Ä–µ–¥–Ω–∏—Ö —Ü–µ–Ω

4. –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
   - –ü—Ä–æ–≥–Ω–æ–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—è—Ö –∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
   - –ù–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã (—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏–∑–∏—Å—ã, –ø–∞–Ω–¥–µ–º–∏–∏ –∏ —Ç.–¥.)
   - –¢–æ—á–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç—Å—è —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –º–æ–¥–µ–ª—å —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   - –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ARIMA, SARIMA –∏–ª–∏ ML-–º–µ—Ç–æ–¥—ã
""")

print("=" * 80)
print("–õ–ê–ë–û–†–ê–¢–û–†–ù–ê–Ø –†–ê–ë–û–¢–ê –ó–ê–í–ï–†–®–ï–ù–ê")
print("=" * 80)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV
output_df = pd.DataFrame({
    '–î–∞—Ç–∞': forecast_series.index,
    '–ü—Ä–æ–≥–Ω–æ–∑ ($)': forecast_series.values
})
output_df.to_csv('forecast_results.csv', index=False)
print("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: forecast_results.csv")